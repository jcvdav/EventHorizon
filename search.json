[{"path":"https://jcvdav.github.io/EventHorizon/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Juan Carlos Villaseñor-Derbez. Author, maintainer. Renato Molina. Author.","code":""},{"path":"https://jcvdav.github.io/EventHorizon/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Villaseñor-Derbez J, Molina R (2025). EventHorizon: Build Event-Study. R package version 0.1.0, https://github.com/jcvdav/EventHorizon.","code":"@Manual{,   title = {EventHorizon: Build Event-Study},   author = {Juan Carlos Villaseñor-Derbez and Renato Molina},   year = {2025},   note = {R package version 0.1.0},   url = {https://github.com/jcvdav/EventHorizon}, }"},{"path":[]},{"path":"https://jcvdav.github.io/EventHorizon/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Build Event-Study","text":"R Package build panels event-study models based user-specified time horizon repeated interventions package co-developed Juan Carlos Villaseñor-Derbez Renato Molina.","code":""},{"path":"https://jcvdav.github.io/EventHorizon/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Build Event-Study","text":"Install development version :","code":"# install.packages(\"pak\") pak::pak(\"jcvdav/EventHorizon\")"},{"path":"https://jcvdav.github.io/EventHorizon/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Build Event-Study","text":"’s example use ","code":"library(tidyr) library(dplyr) #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union library(EventHorizon)   # Load a panel panel <- simulate_panel(n_units = 30, n_periods = 50)  visualize_panel(panel) event_horizon_panel <- panel |> mutate(treatment_id = treatment_ids(id = id, time = time, treatment = treatment, window = 3),        relative_time = calculate_relative_time(id = id, time = time, treatment_id = treatment_id, window = 3),        treatment_id = propagate_treatment_id(id = id, time = time, treatment_id = treatment_id, window = 3)) |> drop_na(treatment_id)  visualize_panel(event_horizon_panel) visualize_panel(event_horizon_panel, prepped = T)"},{"path":"https://jcvdav.github.io/EventHorizon/reference/calculate_relative_time.html","id":null,"dir":"Reference","previous_headings":"","what":"Title — calculate_relative_time","title":"Title — calculate_relative_time","text":"Title","code":""},{"path":"https://jcvdav.github.io/EventHorizon/reference/calculate_relative_time.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Title — calculate_relative_time","text":"","code":"calculate_relative_time(id, time, treatment_id, window)"},{"path":"https://jcvdav.github.io/EventHorizon/reference/calculate_relative_time.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Title — calculate_relative_time","text":"id column name containing unique identifier observational unit panel (dimension) time column name containing time variable panel (.e. t dimension) treatment_id character specifying treatment id, produced treatment_ids() window number indicating number periods within two treatment events merged. units time","code":""},{"path":"https://jcvdav.github.io/EventHorizon/reference/calculate_relative_time.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Title — calculate_relative_time","text":"numeric vector containing relative time treatment number periods start end treatment ids identified treatment_ids()","code":""},{"path":[]},{"path":"https://jcvdav.github.io/EventHorizon/reference/calculate_relative_time.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Title — calculate_relative_time","text":"","code":"# Load packages library(tidyr) library(dplyr) #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union library(EventHorizon)  # Load a panel panel <- simulate_panel(n_units = 10, n_periods = 10) head(panel) #> # A tibble: 6 × 3 #>   id    time       treatment #>   <chr> <date>         <int> #> 1 A1    2025-01-01         0 #> 2 A1    2025-01-02         0 #> 3 A1    2025-01-03         0 #> 4 A1    2025-01-04         1 #> 5 A1    2025-01-05         0 #> 6 A1    2025-01-06         0  event_horizon_panel <- panel |> mutate(treatment_id = treatment_ids(id = id,                                     time = time,                                     treatment = treatment,                                     window = 3),        relative_time = calculate_relative_time(id = id,                                                time = time,                                                treatment_id = treatment_id,                                                window = 3))  head(event_horizon_panel) #> # A tibble: 6 × 5 #>   id    time       treatment treatment_id   relative_time #>   <chr> <date>         <int> <chr>                  <dbl> #> 1 A1    2025-01-01         0 NA                        -3 #> 2 A1    2025-01-02         0 NA                        -2 #> 3 A1    2025-01-03         0 NA                        -1 #> 4 A1    2025-01-04         1 treatment_A1_1             0 #> 5 A1    2025-01-05         0 treatment_A1_1             0 #> 6 A1    2025-01-06         0 treatment_A1_1             0"},{"path":"https://jcvdav.github.io/EventHorizon/reference/propagate_treatment_id.html","id":null,"dir":"Reference","previous_headings":"","what":"Assign id to leads and lags. — propagate_treatment_id","title":"Assign id to leads and lags. — propagate_treatment_id","text":"Propagates treatment id treatment_ids across control periods","code":""},{"path":"https://jcvdav.github.io/EventHorizon/reference/propagate_treatment_id.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assign id to leads and lags. — propagate_treatment_id","text":"","code":"propagate_treatment_id(time, id, treatment_id, window)"},{"path":"https://jcvdav.github.io/EventHorizon/reference/propagate_treatment_id.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assign id to leads and lags. — propagate_treatment_id","text":"time column name containing time variable panel (.e. t dimension) id column name containing unique identifier observational unit panel (dimension) treatment_id character specifying treatment id, produced treatment_ids() window number indicating number periods within two treatment events merged. units time","code":""},{"path":"https://jcvdav.github.io/EventHorizon/reference/propagate_treatment_id.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assign id to leads and lags. — propagate_treatment_id","text":"character vector specifiying treatment id treated control periods given unit","code":""},{"path":"https://jcvdav.github.io/EventHorizon/reference/propagate_treatment_id.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assign id to leads and lags. — propagate_treatment_id","text":"","code":"# Load packages library(tidyr) library(dplyr) library(EventHorizon)  # Load a panel panel <- simulate_panel(n_units = 10, n_periods = 10) head(panel) #> # A tibble: 6 × 3 #>   id    time       treatment #>   <chr> <date>         <int> #> 1 A1    2025-01-01         0 #> 2 A1    2025-01-02         0 #> 3 A1    2025-01-03         0 #> 4 A1    2025-01-04         1 #> 5 A1    2025-01-05         0 #> 6 A1    2025-01-06         0  event_horizon_panel <- panel |> mutate(treatment_id = treatment_ids(id = id,                                     time = time,                                     treatment = treatment,                                     window = 3),        relative_time = calculate_relative_time(id = id,                                                time = time,                                                treatment_id = treatment_id,                                                window = 3),        treatment_id = propagate_treatment_id(id = id,                                              time = time,                                              treatment_id = treatment_id,                                              window = 3)) |> drop_na(treatment_id)  head(event_horizon_panel) #> # A tibble: 6 × 5 #>   id    time       treatment treatment_id   relative_time #>   <chr> <date>         <int> <chr>                  <dbl> #> 1 A1    2025-01-01         0 treatment_A1_1            -3 #> 2 A1    2025-01-02         0 treatment_A1_1            -2 #> 3 A1    2025-01-03         0 treatment_A1_1            -1 #> 4 A1    2025-01-04         1 treatment_A1_1             0 #> 5 A1    2025-01-05         0 treatment_A1_1             0 #> 6 A1    2025-01-06         0 treatment_A1_1             0 visualize_panel(panel)  visualize_panel(event_horizon_panel)  visualize_panel(event_horizon_panel, prepped = TRUE)"},{"path":"https://jcvdav.github.io/EventHorizon/reference/simulate_panel.html","id":null,"dir":"Reference","previous_headings":"","what":"Build a simulated panel — simulate_panel","title":"Build a simulated panel — simulate_panel","text":"Build simulated panel","code":""},{"path":"https://jcvdav.github.io/EventHorizon/reference/simulate_panel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build a simulated panel — simulate_panel","text":"","code":"simulate_panel(n_units = 30, n_periods = 30)"},{"path":"https://jcvdav.github.io/EventHorizon/reference/simulate_panel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build a simulated panel — simulate_panel","text":"n_units integer specifying number observational units n_periods integer specifying number periods (assumed days, max 30)","code":""},{"path":"https://jcvdav.github.io/EventHorizon/reference/simulate_panel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build a simulated panel — simulate_panel","text":"data.frame containing panel three columns id, time, treatment","code":""},{"path":"https://jcvdav.github.io/EventHorizon/reference/simulate_panel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Build a simulated panel — simulate_panel","text":"","code":"library(EventHorizon) # Load a panel panel <- simulate_panel(n_units = 10, n_periods = 10) head(panel) #> # A tibble: 6 × 3 #>   id    time       treatment #>   <chr> <date>         <int> #> 1 A1    2025-01-01         0 #> 2 A1    2025-01-02         0 #> 3 A1    2025-01-03         0 #> 4 A1    2025-01-04         1 #> 5 A1    2025-01-05         0 #> 6 A1    2025-01-06         0"},{"path":"https://jcvdav.github.io/EventHorizon/reference/treatment_ids.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify treatment ids based on a user-defined window — treatment_ids","title":"Identify treatment ids based on a user-defined window — treatment_ids","text":"treatment falls within window, considered single treatment event new treatment id created.","code":""},{"path":"https://jcvdav.github.io/EventHorizon/reference/treatment_ids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify treatment ids based on a user-defined window — treatment_ids","text":"","code":"treatment_ids(id, time, treatment, window, time_units = \"days\")"},{"path":"https://jcvdav.github.io/EventHorizon/reference/treatment_ids.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify treatment ids based on a user-defined window — treatment_ids","text":"id column name containing unique identifier observational unit panel (dimension) time column name containing time variable panel (.e. t dimension) treatment column name containing name dummy variable indicating whether unit treated time t window number indicating number periods within two treatment events merged. units time time_units character vector specifying units time measured. Default \"days\", options \"weeks\", \"months\", \"years\"","code":""},{"path":"https://jcvdav.github.io/EventHorizon/reference/treatment_ids.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify treatment ids based on a user-defined window — treatment_ids","text":"character vector specifying new treatment ids","code":""},{"path":"https://jcvdav.github.io/EventHorizon/reference/treatment_ids.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identify treatment ids based on a user-defined window — treatment_ids","text":"","code":"# Load packages library(tidyr) library(dplyr) library(EventHorizon)  # Load a panel panel <- simulate_panel(n_units = 10, n_periods = 10) head(panel) #> # A tibble: 6 × 3 #>   id    time       treatment #>   <chr> <date>         <int> #> 1 A1    2025-01-01         0 #> 2 A1    2025-01-02         0 #> 3 A1    2025-01-03         0 #> 4 A1    2025-01-04         1 #> 5 A1    2025-01-05         0 #> 6 A1    2025-01-06         0  event_horizon_panel <- panel |> mutate(treatment_id = treatment_ids(id = id,                                     time = time,                                     treatment = treatment,                                     window = 3))  head(event_horizon_panel) #> # A tibble: 6 × 4 #>   id    time       treatment treatment_id   #>   <chr> <date>         <int> <chr>          #> 1 A1    2025-01-01         0 NA             #> 2 A1    2025-01-02         0 NA             #> 3 A1    2025-01-03         0 NA             #> 4 A1    2025-01-04         1 treatment_A1_1 #> 5 A1    2025-01-05         0 treatment_A1_1 #> 6 A1    2025-01-06         0 treatment_A1_1"},{"path":"https://jcvdav.github.io/EventHorizon/reference/visualize_panel.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualize a panel — visualize_panel","title":"Visualize a panel — visualize_panel","text":"Visualize panel","code":""},{"path":"https://jcvdav.github.io/EventHorizon/reference/visualize_panel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize a panel — visualize_panel","text":"","code":"visualize_panel(data, id = id, time = time, treatment = treatment, prepped = F)"},{"path":"https://jcvdav.github.io/EventHorizon/reference/visualize_panel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize a panel — visualize_panel","text":"data object class data.frame tibble containing panel data id column name containing unique identifier observational unit panel (dimension) time column name containing time variable panel (.e. t dimension) treatment column name containing name dummy variable indicating whether unit treated time t prepped boolean specifying panel already prepared package (.e. treatment_ids created modified). , points colored based treatment id.","code":""},{"path":"https://jcvdav.github.io/EventHorizon/reference/visualize_panel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualize a panel — visualize_panel","text":"ggplot object","code":""},{"path":"https://jcvdav.github.io/EventHorizon/reference/visualize_panel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visualize a panel — visualize_panel","text":"","code":"# Load packages library(tidyr) library(dplyr) library(EventHorizon)  panel <- simulate_panel(n_units = 10, n_periods = 10) visualize_panel(panel)   event_horizon_panel <- panel |> mutate(treatment_id = treatment_ids(id = id,                                     time = time,                                     treatment = treatment,                                     window = 3),        relative_time = calculate_relative_time(id = id,                                                time = time,                                                treatment_id = treatment_id,                                                window = 3),        treatment_id = propagate_treatment_id(id = id,                                              time = time,                                              treatment_id = treatment_id,                                              window = 3)) |> drop_na(treatment_id)  visualize_panel(event_horizon_panel)  visualize_panel(event_horizon_panel, prepped = TRUE)"}]
